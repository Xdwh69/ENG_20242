#1. Crie uma lista contendo cinco números inteiros de sua escolha. Em seguida, percorra essa lista e imprima o valor de cada elemento multiplicado por 2. O resultado deve mostrar o novo valor de cada elemento, um por vez.
# Lista de números inteiros
numeros = [1, 2, 3, 4, 5]

# Percorrendo a lista e imprimindo cada número multiplicado por 2
for numero in numeros:
    print(numero * 2)


#2. Dada a lista ["maçã", "banana", "laranja", "uva"], remova o item "banana" da lista e adicione a fruta "melancia" no lugar. Depois, mostre a nova lista atualizada com as alterações feitas.
# Lista inicial
frutas = ["maçã", "banana", "laranja", "uva"]

# Removendo "banana" e adicionando "melancia" no lugar
index_banana = frutas.index("banana")
frutas[index_banana] = "melancia"

# Exibindo a nova lista
print(frutas)


#3. Escreva um programa que receba uma lista de números inteiros e exiba qual é o maior número e qual é o menor número presente na lista. Certifique-se de mostrar ambos os valores ao final.
# Lista de números inteiros
numeros = [12, 7, 19, 3, 25]

# Encontrando o maior e o menor número
maior = max(numeros)
menor = min(numeros)

# Exibindo os resultados
print(f"Maior número: {maior}")
print(f"Menor número: {menor}")


#4. Crie uma função que receba uma lista contendo várias palavras (strings). A função deve devolver uma nova lista que contenha a quantidade de letras de cada palavra da lista original. Exiba essa nova lista com o número de letras correspondente a cada palavra.
# Função para contar letras nas palavras
def conta_letras(palavras):
    return [len(palavra) for palavra in palavras]

# Lista de palavras
palavras = ["Python", "programação", "código"]

# Exibindo a nova lista com o número de letras
print(conta_letras(palavras))


#5. Dada uma lista de números inteiros que você vai definir, ordene essa lista em ordem crescente e depois exiba o resultado da lista ordenada.
# Lista de números
numeros = [8, 3, 1, 5, 7, 2]

# Ordenando a lista
numeros_ordenados = sorted(numeros)

# Exibindo a lista ordenada
print(numeros_ordenados)


#6. Crie uma tupla que contenha os números de 1 a 5. Tente alterar o valor do segundo elemento dessa tupla e observe o que acontece. No final, explique por que você conseguiu ou não modificar o valor.
# Criando a tupla
tupla = (1, 2, 3, 4, 5)

# Tentando alterar o segundo elemento
try:
    tupla[1] = 10
except TypeError as e:
    print(f"Erro: {e}")

# Explicação
print("Tuplas são imutáveis, ou seja, seus valores não podem ser alterados após a criação.")


#7. Escreva um programa que receba uma tupla contendo diversos números inteiros. O programa deve calcular e exibir a soma de todos os números presentes na tupla.
# Tupla de números inteiros
numeros = (10, 20, 30, 40)

# Calculando a soma
soma = sum(numeros)

# Exibindo o resultado
print(f"Soma dos números: {soma}")


#8. Dada uma tupla que contém cinco números, crie uma função que retorne o primeiro e o último número dessa tupla. O programa deve imprimir ambos os valores corretamente.
# Função para retornar o primeiro e o último número
def primeiro_ultimo(tupla):
    return tupla[0], tupla[-1]

# Tupla de números
numeros = (5, 10, 15, 20, 25)

# Exibindo os valores
primeiro, ultimo = primeiro_ultimo(numeros)
print(f"Primeiro: {primeiro}, Último: {ultimo}")


#9. Converta a lista ["a", "b", "c", "d"] em uma tupla e, em seguida, exiba o tipo do novo objeto que foi criado. O programa deve deixar claro que o tipo mudou de lista para tupla.
# Lista inicial
lista = ["a", "b", "c", "d"]

# Convertendo para tupla
tupla = tuple(lista)

# Exibindo o tipo do objeto
print(type(tupla))  # Deve ser <class 'tuple'>


#10. Crie uma tupla com três números inteiros e uma string. Depois, verifique se o número 3 está presente nessa tupla e mostre uma mensagem dizendo se o número foi encontrado ou não.
# Criando a tupla
tupla = (1, 2, 3, "Python")

# Verificando se o número 3 está presente
if 3 in tupla:
    print("O número 3 foi encontrado na tupla.")
else:
    print("O número 3 não foi encontrado na tupla.")


#11. Crie dois sets: set1 = {1, 2, 3, 4} e set2 = {3, 4, 5, 6}. Exiba a união dos dois sets (todos os elementos sem repetição), a interseção (elementos que aparecem nos dois sets) e a diferença (elementos presentes no primeiro set, mas não no segundo). Mostre os resultados de cada operação.#11. Crie dois sets: set1 = {1, 2, 3, 4} e set2 = {3, 4, 5, 6}. Exiba a união dos dois sets (todos os elementos sem repetição), a interseção (elementos que aparecem nos dois sets) e a diferença (elementos presentes no primeiro set, mas não no segundo). Mostre os resultados de cada operação.
# Sets iniciais
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}

# Operações com sets
uniao = set1 | set2
interseccao = set1 & set2
diferenca = set1 - set2

# Exibindo os resultados
print(f"União: {uniao}")
print(f"Interseção: {interseccao}")
print(f"Diferença: {diferenca}")


#12. Dada a lista [1, 2, 2, 3, 4, 4, 5], remova os elementos duplicados transformando a lista em um set. Ao final, exiba o set resultante, que deve conter apenas valores únicos.
# Lista com duplicados
lista = [1, 2, 2, 3, 4, 4, 5]

# Removendo duplicados
set_unico = set(lista)

# Exibindo o set resultante
print(set_unico)


#13. Crie um set contendo os valores {5, 10, 15, 20}. Adicione o número 25 a esse set e depois remova o valor 15. Mostre o set após cada alteração.
# Set inicial
meu_set = {5, 10, 15, 20}

# Adicionando e removendo elementos
meu_set.add(25)
print(meu_set)
meu_set.remove(15)
print(meu_set)


#14. Verifique se o número 7 está presente no set {1, 2, 3, 4, 5}. O programa deve exibir uma mensagem informando se o número foi encontrado ou não no set.#14. Verifique se o número 7 está presente no set {1, 2, 3, 4, 5}. O programa deve exibir uma mensagem informando se o número foi encontrado ou não no set.
# Set de números
numeros = {1, 2, 3, 4, 5}

# Verificando se 7 está presente
if 7 in numeros:
    print("O número 7 foi encontrado no set.")
else:
    print("O número 7 não foi encontrado no set.")


#15. Crie um set vazio e adicione vários valores a ele usando um laço de repetição (por exemplo, um for ou while). No final, mostre todos os valores armazenados no set.
# Criando um set vazio
meu_set = set()

# Adicionando valores usando um laço
for i in range(5):
    meu_set.add(i)

# Exibindo os valores do set
print(meu_set)


#16. Crie um dicionário com os pares chave-valor 'nome': 'Ana', 'idade': 22, 'curso': 'Engenharia'. Adicione uma nova chave 'universidade': 'USP' ao dicionário. Em seguida, exiba o dicionário completo com todas as informações.
# Dicionário inicial
dados = {"nome": "Ana", "idade": 22, "curso": "Engenharia"}

# Adicionando nova chave
dados["universidade"] = "USP"

# Exibindo o dicionário
print(dados)


#17. Escreva um programa que percorra um dicionário com várias chaves e valores. Para cada par, imprima a chave e o valor no formato: Chave: X, Valor: Y. O dicionário pode conter qualquer informação que você preferir.
# Dicionário exemplo
dados = {"nome": "João", "idade": 30, "cidade": "São Paulo"}

# Percorrendo e exibindo as chaves e valores
for chave, valor in dados.items():
    print(f"Chave: {chave}, Valor: {valor}")


#18. Crie um dicionário que relacione nomes de alunos às suas notas. Depois, crie uma função que calcule e exiba a média das notas desses alunos com base nas informações do dicionário.
# Dicionário de alunos e notas
alunos = {"Ana": 9, "João": 7, "Pedro": 8}

# Função para calcular a média
def calcular_media(dicionario):
    return sum(dicionario.values()) / len(dicionario)

# Exibindo a média
print(f"Média das notas: {calcular_media(alunos):.2f}")


#19. Escreva um programa que permita ao usuário buscar o valor de uma chave específica em um dicionário. Caso a chave não exista, o programa deve exibir uma mensagem dizendo que a chave não foi encontrada. Teste o programa com diferentes chaves.
# Dicionário exemplo
dados = {"nome": "Maria", "idade": 25, "cidade": "Rio de Janeiro"}

# Entrada do usuário
chave = input("Digite a chave que deseja buscar: ")

# Verificando se a chave existe
if chave in dados:
    print(f"Valor: {dados[chave]}")
else:
    print("Chave não encontrada.")


#20. Dado um dicionário que contém produtos e seus respectivos preços, como {'pão': 2.50, 'leite': 3.00, 'café': 4.50}, permita que o usuário altere o preço de um dos produtos e exiba o dicionário atualizado com o novo valor.
# Dicionário de produtos
produtos = {"pão": 2.50, "leite": 3.00, "café": 4.50}

# Alterando o preço de um produto
produto = input("Digite o produto que deseja alterar: ")
if produto in produtos:
    novo_preco = float(input("Digite o novo preço: "))
    produtos[produto] = novo_preco
    print(f"Dicionário atualizado: {produtos}")
else:
    print("Produto não encontrado.")


